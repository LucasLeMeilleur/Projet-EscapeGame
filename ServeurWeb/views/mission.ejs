<!DOCTYPE html>

<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Escape Game</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="">

    <link rel="stylesheet" href="/css/forme.css">
    <link rel="stylesheet" href="/css/mission.css">

    <link rel="stylesheet" href="/css/responsive/forme.css">
</head>

<body>

    <% if (typeof permission !=='undefined' && permission==1) { %>
        <%- include('partials/header', {navig: "admin" }); %>
    <% }else if(typeof permission !=='undefined' && permission==0){%>
        <%- include('partials/header', {navig: "normal" }); %>
    <% }else{ %>
        <%- include('partials/header'); %>
    <% } %>


    <section id="mission-section">
        <h2>D√©marrer une mission</h2>
      
        <label for="missionSelect">Choisissez une mission :</label>
        <select id="missionSelect">
          <option disabled selected>Chargement des missions...</option>
        </select>
      
        <button id="startMissionBtn">D√©marrer la mission</button>
        
        <p>Mission connect√©</p>
        <div id="missions-container"></div>
    </section>
      
      <script>
        // Charger les missions dans le select
        async function chargerMissions() {
          try {
            const response = await fetch('/api/game/mission/liste');
            const missions = await response.json();
      
            const select = document.getElementById('missionSelect');
            select.innerHTML = ''; // Nettoyer le contenu initial
      
            missions.forEach(mission => {
              const option = document.createElement('option');
              option.value = mission.idmission;
              option.textContent = mission.nom || `Mission ${mission.id}`;
              select.appendChild(option);
            });
          } catch (error) {
            console.error('Erreur de chargement des missions :', error);
            const select = document.getElementById('missionSelect');
            select.innerHTML = '<option disabled>Erreur lors du chargement</option>';
          }
        }
      
        // Envoyer la mission s√©lectionn√©e
        document.getElementById('startMissionBtn').addEventListener('click', async () => {
          const select = document.getElementById('missionSelect');
          const missionId = select.value;
      
          if (!missionId) {
            alert('Veuillez s√©lectionner une mission.');
            return;
          }
      
          try {
            const response = await fetch('/api/game/mission/demarrer', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ mission: missionId })
            });
      
            const result = await response.json();
            if (response.ok) {
              alert('Mission d√©marr√©e avec succ√®s !');
            } else {
              alert('Erreur : ' + result.message);
            }
          } catch (error) {
            console.error('Erreur lors du d√©marrage de la mission :', error);
            alert('Une erreur est survenue lors du d√©marrage.');
          }
        });
      
        async function fetchAndDisplayMissions() {
          try {
            const response = await fetch('/api/game/mission/activite');
            const data = await response.json();

            const container = document.getElementById('missions-container');

            data.message.forEach(item => {
              const missionDiv = document.createElement('div');

              // Texte de la mission
              const missionText = document.createElement('span');
              missionText.textContent = `Mission: ${item.mission} `;

              // Bouton red√©marrer
              const restartButton = document.createElement('button');
              restartButton.textContent = 'üîÑ';
              restartButton.title = 'Red√©marrer la mission';
              restartButton.style.marginLeft = '10px';

              // Click = requ√™te fetch vers l'API sans rediriger
              restartButton.addEventListener('click', () => {
                fetch(`/api/game/mission/redemarrer/${item.mission}`, {
                  method: 'POST', // ou 'GET' selon ton API
                })
                .then(response => {
                  if (!response.ok) throw new Error("√âchec du red√©marrage");
                  return response.json(); // si tu attends une r√©ponse JSON
                })
                .then(data => {
                  console.log(`Mission ${item.mission} red√©marr√©e !`, data);
                  // √©ventuellement une notification visuelle ici
                })
                .catch(error => {
                  console.error("Erreur:", error);
                });
              });

              // Ajouter le texte et le bouton au div
              missionDiv.appendChild(missionText);
              missionDiv.appendChild(restartButton);

              // Ajouter le div au conteneur
              container.appendChild(missionDiv);
            });

          } catch (error) {
            console.error('Erreur lors du fetch:', error);
          }
        }

        // Appel de la fonction au chargement de la page
        document.addEventListener('DOMContentLoaded', fetchAndDisplayMissions);
        document.addEventListener('DOMContentLoaded', chargerMissions);
      </script>
      

    <%- include('partials/footer'); %>




</body>

</html>